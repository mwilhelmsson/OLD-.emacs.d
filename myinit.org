#+STARTUP: overview

* Small tweaks
Disable startup message, menubar and toolbar
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
#+END_SRC

Sometimes I want the menubar to look up keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f12>") 'menu-bar-mode)
#+END_SRC

I'm too lazy to write 'yes' and 'no'
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

I really want a refresh button
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC

Backup and autosave is for cowards
#+BEGIN_SRC emacs-lisp
(setq backup-inhibited t)
(setq auto-save-default nil)
#+END_SRC

I hate the beep
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

* Fonts
I like DejaVu Sans Mono
#+BEGIN_SRC emacs-lisp
  (set-frame-font "DejaVu Sans Mono-12")
#+END_SRC

* Try
I like to try out packages without installing them for real
#+BEGIN_SRC emacs-lisp
(use-package try
	:ensure t)
#+END_SRC

* Which key
  Brings up some help
  #+BEGIN_SRC emacs-lisp
  (use-package which-key
	:ensure t 
	:config
	(which-key-mode))
  #+END_SRC

* Org mode
Will use [[http://doc.norang.ca/org-mode.html]] as inspiration for this.
** I want things to be pretty
  Org bullets makes things look pretty
  #+BEGIN_SRC emacs-lisp
  (use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  #+END_SRC
** Key binding
   #+BEGIN_SRC emacs-lisp
     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-ca" 'org-agenda)
     (global-set-key "\C-cb" 'org-iswitchb)
   #+END_SRC
** Agenda
   
   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-files (quote ("~/org/agenda")))
   #+END_SRC
** Move single cell in tables
   #+BEGIN_SRC emacs-lisp
     ;; Move single cells using C-M-up C-M-down C-M-left C-M-right
     (add-hook 'org-mode-hook
      '(lambda ()
         (local-set-key [C-M-up] (quote org-table-move-single-cell-up))
         (local-set-key [C-M-down] (quote org-table-move-single-cell-down))
         (local-set-key [C-M-left] (quote org-table-move-single-cell-left))
         (local-set-key [C-M-right] (quote org-table-move-single-cell-right))))


     (defun org-table-swap-cells (i1 j1 i2 j2)
       "Swap two cells"
       (let ((c1 (org-table-get i1 j1))
             (c2 (org-table-get i2 j2)))
         (org-table-put i1 j1 c2)
         (org-table-put i2 j2 c1)
         (org-table-align)))

     (defun org-table-move-single-cell (direction)
       "Move the current cell in a cardinal direction according to the
       parameter symbol: 'up 'down 'left 'right. Swaps contents of
       adjacent cell with current one."
       (unless (org-at-table-p)
         (error "No table at point"))
       (let ((di 0) (dj 0))
         (cond ((equal direction 'up) (setq di -1))
               ((equal direction 'down) (setq di +1))
               ((equal direction 'left) (setq dj -1))
               ((equal direction 'right) (setq dj +1))
               (t (error "Not a valid direction, must be up down left right")))
         (let* ((i1 (org-table-current-dline))
                (j1 (org-table-current-column))
                (i2 (+ i1 di))
                (j2 (+ j1 dj)))
           (org-table-swap-cells i1 j1 i2 j2)
           (org-table-goto-line i2)
           (org-table-goto-column j2))))

     (defun org-table-move-single-cell-up ()
       "Move a single cell up in a table; swap with anything in target cell"
       (interactive)
       (org-table-move-single-cell 'up))

     (defun org-table-move-single-cell-down ()
       "Move a single cell down in a table; swap with anything in target cell"
       (interactive)
       (org-table-move-single-cell 'down))

     (defun org-table-move-single-cell-left ()
       "Move a single cell left in a table; swap with anything in target cell"
       (interactive)
       (org-table-move-single-cell 'left))

     (defun org-table-move-single-cell-right ()
       "Move a single cell right in a table; swap with anything in target cell"
       (interactive)
       (org-table-move-single-cell 'right))
   #+END_SRC
** Reveal.js

 Powerpoint and such require to much work
   #+BEGIN_SRC emacs-lisp
     (use-package ox-reveal
     :ensure ox-reveal)

     (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
     (setq org-reveal-mathjax t)

     (use-package htmlize
     :ensure t)
   #+END_SRC
** ox-twbs
   #+BEGIN_SRC emacs-lisp
     (use-package ox-twbs
       :ensure t)
   #+END_SRC
** org-contacts
   I want to have a useful contact list
   #+BEGIN_SRC emacs-lisp
     (require 'org-contacts)
     (setq org-contacts-files '("~/org/contacts.org"))
   #+END_SRC

* Ace windows for easy window switching
  #+BEGIN_SRC emacs-lisp
  (use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
    ))
  #+END_SRC

* Swiper / Ivy / Counsel
  Swiper gives us a really efficient incremental search with regular expressions
  and Ivy / Counsel replace a lot of ido or helms completion functionality
  #+BEGIN_SRC emacs-lisp
  
  (use-package counsel
  :ensure t
  )

  (use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy))


  (use-package swiper
  :ensure t
  :bind (("C-s" . swiper)
	 ("C-r" . swiper)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
  #+END_SRC

* Avy - navigate by searching for a letter on the screen and jumping to it
  See https://github.com/abo-abo/avy for more info
  #+BEGIN_SRC emacs-lisp
  (use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-word-1)) ;; changed from char as per jcs
  #+END_SRC

* Autocomplete
  #+BEGIN_SRC emacs-lisp
  (use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
  #+END_SRC

* Themes
Install themes
  #+BEGIN_SRC emacs-lisp

    (use-package color-theme
      :ensure t)
    (use-package zenburn-theme
      :ensure t)
    (use-package tangotango-theme
      :ensure t)
    (use-package white-sand-theme
      :ensure t)
    (use-package moe-theme
      :ensure t)
    (use-package solarized-theme
      :ensure t)
  #+END_SRC

Apparently, this is my current theme
#+BEGIN_SRC emacs-lisp
  (load-theme 'tangotango t)
#+END_SRC
  
* Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))

  #+END_SRC

* Python
  #+BEGIN_SRC emacs-lisp
    (use-package jedi
      :ensure t
      :init
      (add-hook 'python-mode-hook 'jedi:setup)
      (add-hook 'python-mode-hook 'jedi:ac-setup))
      

      (use-package elpy
      :ensure t
      :config 
      (elpy-enable))

  #+END_SRC

* Yasnippet
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :init
        (yas-global-mode 1))

  #+END_SRC

* SLIME
Slime is nice
#+BEGIN_SRC emacs-lisp
  (load (expand-file-name "~/quicklisp/slime-helper.el"))
  (setq inferior-lisp-program "sbcl")
#+END_SRC

I need autocomplete with my slime
#+BEGIN_SRC emacs-lisp
  (use-package ac-slime
    :ensure t)
#+END_SRC

* Paredit
  I like parens
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :config
    (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
      (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
      (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
      (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
      (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
      (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
      (add-hook 'scheme-mode-hook           #'enable-paredit-mode))
#+END_SRC


I want it to work with Slime as well
#+BEGIN_SRC emacs-lisp
  (defun override-slime-repl-bindings-with-paredit ()
    (define-key slime-repl-mode-map
      (read-kbd-macro paredit-backward-delete-key) nil))
  (add-hook 'slime-repl-mode-hook 'override-slime-repl-bindings-with-paredit)
#+END_SRC

* Magit
Shamelessly stolen from Magnar Sveen
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)


  (defun magit-status-fullscreen (prefix)
    (interactive "P")
    (magit-status)
    (unless prefix
      (delete-other-windows)))

  (set-default 'magit-push-always-verify nil)
  (set-default 'magit-revert-buffers 'silent)
  (set-default 'magit-no-confirm '(stage-all-changes
                                   unstage-all-changes))

  (defun my/magit-cursor-fix ()
    (beginning-of-buffer)
    (when (looking-at "#")
      (forward-line 2)))

  (add-hook 'git-commit-mode-hook 'my/magit-cursor-fix)

  (defun vc-annotate-quit ()
    "Restores the previous window configuration and kills the vc-annotate buffer"
    (interactive)
    (kill-buffer)
    (jump-to-register :vc-annotate-fullscreen))

  (eval-after-load "vc-annotate"
    '(progn
       (defadvice vc-annotate (around fullscreen activate)
         (window-configuration-to-register :vc-annotate-fullscreen)
         ad-do-it
         (delete-other-windows))

       (define-key vc-annotate-mode-map (kbd "q") 'vc-annotate-quit)))

  (global-set-key (kbd "C-x m") 'magit-status-fullscreen)
  (autoload 'magit-status-fullscreen "magit")
#+END_SRC

* Projectile
I want to manage my projects in a sane way
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t)
  (use-package counsel-projectile
    :ensure t)
  (projectile-global-mode)
#+END_SRC

* Powerline
I want a pretty modeline
#+BEGIN_SRC emacs-lisp
  (use-package powerline
     :ensure t)
#+END_SRC

Grey colors is nice
#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   '(mode-line-buffer-id ((t (:foreground "#000000" :bold t))))
   '(which-func ((t (:foreground "#77aaff"))))
   '(mode-line ((t (:foreground "#000000" :background "#dddddd" :box nil))))
   '(mode-line-inactive ((t (:foreground "#000000" :background "#bbbbbb" :box nil)))))
#+END_SRC

Why not just steal a theme from Howard Abrams?
#+BEGIN_SRC emacs-lisp
  (defun powerline-simpler-vc-mode (s)
    (if s
        (replace-regexp-in-string "Git[:-]" "" s)
      s))

  ;; Some point, we could change the text of the minor modes, but we
  ;; need to get the text properties and sub them /back in/. To be
  ;; figured out later... Like:
  ;;   (let* ((props (text-properties-at 1 s))
  ;;          (apple (set-text-properties 0 1 props "⌘"))
  ;;          (fly-c (set-text-properties 0 1 props "✓"))
  ;;          (news1 (replace-regexp-in-string "񓵸" apple s)))
  ;;          (news2 (replace-regexp-in-string "FlyC" fly-c news1)))

  (defun powerline-simpler-minor-display (s)
      (replace-regexp-in-string
       (concat " " (mapconcat 'identity '("񓵸" "Projectile" "Fill" "BufFace") "\\|")) "" s))

  (defun powerline-ha-theme ()
    "A powerline theme that removes many minor-modes that don't serve much purpose on the mode-line."
    (interactive)
    (setq-default mode-line-format
                  '("%e"
                    (:eval
                     (let*
                         ((active
                           (powerline-selected-window-active))
                          (mode-line
                           (if active 'mode-line 'mode-line-inactive))
                          (face1
                           (if active 'powerline-active1 'powerline-inactive1))
                          (face2
                           (if active 'powerline-active2 'powerline-inactive2))
                          (separator-left
                           (intern
                            (format "powerline-%s-%s" powerline-default-separator
                                    (car powerline-default-separator-dir))))
                          (separator-right
                           (intern
                            (format "powerline-%s-%s" powerline-default-separator
                                    (cdr powerline-default-separator-dir))))
                          (lhs
                           (list
                            (powerline-raw "%*" nil 'l)
                            ;; (powerline-buffer-size nil 'l)
                            (powerline-buffer-id nil 'l)
                            (powerline-raw " ")
                            (funcall separator-left mode-line face1)
                            (powerline-narrow face1 'l)
                            (powerline-simpler-vc-mode (powerline-vc face1))))
                          (rhs
                           (list
                            (powerline-raw mode-line-misc-info face1 'r)
                            (powerline-raw "%4l" face1 'r)
                            (powerline-raw ":" face1)
                            (powerline-raw "%3c" face1 'r)
                            (funcall separator-right face1 mode-line)
                            (powerline-raw " ")
                            (powerline-raw "%6p" nil 'r)
                            (powerline-hud face2 face1)))
                          (center
                           (list
                            (powerline-raw " " face1)
                            (funcall separator-left face1 face2)
                            (when
                                (boundp 'erc-modified-channels-object)
                              (powerline-raw erc-modified-channels-object face2 'l))
                            (powerline-major-mode face2 'l)
                            (powerline-process face2)
                            (powerline-raw " :" face2)

                            (powerline-simpler-minor-display
                             (powerline-minor-modes face2 'l))

                            (powerline-raw " " face2)
                            (funcall separator-right face2 face1))))
                       (concat
                        (powerline-render lhs)
                        (powerline-fill-center face1
                                               (/
                                                (powerline-width center)
                                                2.0))
                        (powerline-render center)
                        (powerline-fill face1
                                        (powerline-width rhs))
                        (powerline-render rhs)))))))

  (powerline-ha-theme)
#+END_SRC

* GNUS
I need to set some variables
#+BEGIN_SRC emacs-lisp
  (setq user-mail-address "micke@datahaxx.se")
  (setq user-full-name "Micke Wilhelmsson")
  (setq send-mail-function (quote smtpmail-send-it))
  (setq smtpmail-smtp-server "mail.datahaxx.se")
  (setq smtpmail-smtp-service 587)
#+END_SRC

* EVIL
Well, vim owns ye all..
#+BEGIN_SRC emacs-lisp
  (use-package evil
               :ensure t
               :init (evil-mode 1)
               :config ;; Change color of mode line depending on evil state(insert/modified/regular emacs)
               (lexical-let ((default-color (cons (face-background 'mode-line)
                                                  (face-foreground 'mode-line))))
                 (add-hook 'post-command-hook
                           (lambda ()
                             (let ((color (cond ((minibufferp) default-color)
                                                ((evil-insert-state-p) '("#e80000" . "#ffffff"))
                                                ((evil-emacs-state-p)  '("#444488" . "#ffffff"))
                                                ((buffer-modified-p)   '("#006fa0" . "#ffffff"))
                                                (t default-color))))
                               (set-face-background 'mode-line (car color))
                               (set-face-foreground 'mode-line (cdr color)))))))


  (use-package key-chord
               :ensure t
               :init (key-chord-mode 1)
               :config (key-chord-define evil-insert-state-map "jj" 'evil-normal-state))

  (use-package evil-paredit
               :ensure t
               :init
               (add-hook 'emacs-lisp-mode-hook 'evil-paredit-mode)
               (add-hook 'lisp-mode-hook 'evil-paredit-mode))
#+END_SRC

** evil-leader 
#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
             :ensure t
             :init (global-evil-leader-mode)
             :config (evil-leader/set-leader ","))

  (evil-leader/set-key
    "e" 'find-file
    "b" 'switch-to-buffer
    "k" 'kill-buffer
    "s" 'swiper
    "x" 'counsel-M-x)
#+END_SRC


